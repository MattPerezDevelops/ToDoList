@page "/ToDo"
@using System.Text.RegularExpressions
<h3>@HeaderName</h3>
<!--Edit Form-->
<EditForm Model="task" class="form-inline" OnValidSubmit="AddTask">
    <MudTextField @bind-Value="task.TaskName" Label="Add a Task" Variant="Variant.Outlined" Margin="Margin.Dense" DefaultFocus></MudTextField>
</EditForm>


<div class="progress-bar my-2 mx-2" role="progressbar" style="width:@(PercentageCompleted)%" aria-valuemax="100" aria-valuemin="0">
    @(PercentageCompleted)%
</div>


<ul class="list-group my-2">

    @foreach (var taskItem in Tasks)
    {
            if (taskItem.IsComplete)
            {
                <!--Task Completed-->
                taskItem.completedDateTime = DateTime.Now;
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled" NoIcon="true" Class="my-2" @onclick="(()=> taskItem.IsComplete = !taskItem.IsComplete)" ShowCloseIcon="true" CloseIconClicked="(() => RemoveTask(taskItem))"><del> @taskItem.TaskName</del>   <MudText Align="Align.End"><b>Completed:</b> @taskItem.completedDateTime</MudText></MudAlert>
            }
            else
            {
                <!--Tasks To Do-->
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled" NoIcon="true" Class="my-2"  @onclick="(()=> taskItem.IsComplete = !taskItem.IsComplete)"ShowCloseIcon="true" CloseIconClicked="(() => RemoveTask(taskItem))"> @taskItem.TaskName </MudAlert>
                taskItem.completedDateTime = new DateTime();
            }
    }

</ul>


@code {
    //C# Code
    protected List<TaskModel> Tasks = new List<TaskModel>();

    protected TaskModel task = new TaskModel();

    //Dynamic Header
    protected override void OnInitialized()
    {
        if (HeaderName == "")
        {
            HeaderName = "To Do List";
        }
    }

    [Parameter] public String? HeaderName { get; set; }

    private void AddTask()
    {
        if (task.TaskName != null && task.TaskName != " ")
        {
           Tasks.Add(task); 
        }
        task = new TaskModel();
    }
    private void RemoveTask(TaskModel task)
    {
     Tasks.Remove(task); 
     task = new TaskModel();   
    }
    public int PercentageCompleted
    {
        get
        {
            return Tasks.Count > 0 ? (Tasks.Count(x => x.IsComplete) * 100 / Tasks.Count) : 0;
        }
    }
 }

